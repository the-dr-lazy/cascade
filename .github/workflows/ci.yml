name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - next

jobs:
  headroom:
    name: Headroom
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download Headroom
        run: |
          sudo curl -Lo /usr/bin/headroom https://github.com/vaclavsvejcar/headroom/releases/download/v0.3.2.0/headroom-0.3.2.0-Linux-ghc-8.8.4
          sudo chmod +x /usr/bin/headroom

      - name: Check headers
        run: headroom run --check-headers

  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1
        id: haskell
        with:
          ghc-version: "8.10.2"
          cabal-version: "3.2"

      - name: Install Brittany
        run: |
          curl -Lo brittany.zip https://github.com/lspitzner/brittany/releases/download/0.13.1.0/brittany-0.13.1.0-linux.zip
          unzip brittany.zip
          rm brittany.zip
          sudo chmod +x brittany
          sudo mv brittany /usr/bin/

      - name: Check formatting
        run: brittany -c **/*.hs

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          # Ubuntu builds disabled due to issue with installing libjwt-dev@1.12.x
          # TODO: enable it when it's possible to install the lib
          # - ubuntu-latest
          - macOS-latest

    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1
        id: haskell
        with:
          ghc-version: "8.8.4"
          cabal-version: "3.2"

      - name: Setup environment
        uses: knicknic/os-specific-run@v1.0.2
        with:
          linux: |
            sudo apt-get update
            sudo apt-get --yes install libjwt-dev

          macos: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            export HOMEBREW_NO_INSTALL_CLEANUP=1

            brew install libjwt

      - name: Configure
        run: |
          cabal new-configure --disable-documentation \
                              --disable-optimization \
                              --enable-tests \
                              --enable-benchmarks \
                              --test-show-details=direct

      - uses: actions/cache@v2.1.3
        name: Cache ~/.cabal/store
        with:
          path: ${{ steps.haskell.outputs.cabal-store }}
          key: build-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project') }}-${{ hashFiles('cabal.project.freeze') }}-${{ hashFiles('cabal.project.local') }}

      - name: Install dependencies
        run: |
          cabal new-build all --only-dependencies

      - name: Build
        run: |
          cabal new-build all

  test:
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: running tests on Ubuntu
        os: [macOS-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1
        id: haskell
        with:
          ghc-version: "8.8.4"
          cabal-version: "3.2"

      - name: Setup environment
        uses: knicknic/os-specific-run@v1.0.2
        with:
          linux: |
            sudo apt-get update
            sudo apt-get --yes remove postgresql\*
            sudo apt-get --yes install postgresql-13
            sudo service postgresql restart 13
            echo "/usr/lib/postgresql/13/bin" >> $GITHUB_PATH
            export PATH=/usr/lib/postgresql/13/bin:$PATH

            sudo apt-get --yes install sqitch libdbd-pg-perl postgresql-client-13

            postgres --version
          macos: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            export HOMEBREW_NO_INSTALL_CLEANUP=1

            brew install coreutils libjwt postgres

            brew tap sqitchers/sqitch
            brew install sqitch --with-postgres-support

            postgres --version

      - name: Setup $PATH
        run: |
          echo "~/.cabal/bin" >> $GITHUB_PATH

      - name: Configure
        run: |
          cabal new-configure --disable-documentation \
                              --enable-optimization=2 \
                              --enable-tests \
                              --disable-coverage \
                              # Due to some cabal issues with internal components
                              # we are not able to disable per-component build
                              # thus we will not be able to generate code coverages
                              # TODO: Enable code coverage when it's possible!
                              # --disable-per-component \
                              --test-show-details=direct

      - name: Cache ~/.cabal/store
        uses: actions/cache@v2.1.3
        with:
          path: ${{ steps.haskell.outputs.cabal-store }}
          key: test-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project') }}-${{ hashFiles('cabal.project.freeze') }}-${{ hashFiles('cabal.project.local') }}

      - name: Install dependencies
        run: |
          cabal new-build all --only-dependencies
          # The tool for converting tix and mix files
          # from Haskell Program Coverage to Codecov reports
          # cabal new-install hpc-codecov --install-method=copy --overwrite-policy=always

      - name: Cache ~/.cascade/tmp-postgres
        uses: actions/cache@v2.1.3
        with:
          path: ~/.cascade/tmp-postgres
          key: test-${{ runner.os }}-${{ hashFiles('migrations/**/*') }}

      - name: Test
        run: |
          # The custom script for enabling coverage
          # and runing test for each package
          # scripts/ci/test
          cabal new-test all
      #
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     name: Cascade
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: "*.json"
      #     directory: ./coverage/reports
      #     fail_ci_if_error: true
      #     verbose: true
